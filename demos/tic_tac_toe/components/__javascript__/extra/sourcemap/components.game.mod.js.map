{
	"version": 3,
	"file": "/home/ryli/repos/reactscrypt/demos/tic_tac_toe/components/__javascript__/components.game.mod.js",
	"sources": [
		"/home/ryli/repos/reactscrypt/demos/tic_tac_toe/components/game.py"
	],
	"sourcesContent": [
		"from reactscrypt.react import ReactComponent, ReactElement as e\nfrom components.board import Board\n\ndef calculate_winner(squares):\n    lines = (\n        (0, 1, 2),\n        (3, 4, 5),\n        (6, 7, 8),\n        (0, 3, 6),\n        (1, 4, 7),\n        (2, 5, 8),\n        (0, 4, 8),\n        (2, 4, 6)\n    )\n\n    for a,b,c in lines:\n        if squares[a] and (squares[a] is squares[b]) and (squares[a] is squares[c]):\n            return squares[a]\n    return None\n\nclass Game(ReactComponent):\n\n    initial_state = {\n        'history': [{'squares': [None for _ in range(9)]}],\n        'step_number': 0,\n        'x_is_next': True\n    }\n\n    def handle_click(self, i):\n        history = self.state['history'][0:self.state['step_number'] + 1]\n        current = history[len(history) - 1]\n        squares = current['squares'][:]\n\n        # can also use javascript .slice() directly to copy\n        #squares = current['squares'].slice()\n\n        if calculate_winner(squares) or squares[i]:\n            return\n\n        squares[i] = 'X' if self.state['x_is_next'] else 'O'\n        self.set_state({\n            # use javascript concat directly\n            # could also use utils.common.immutable_append\n            'history': history.concat([{'squares': squares}]),\n            'step_number': len(history),\n            'x_is_next': not self.state['x_is_next']\n        })\n\n    def jump_to(self, step):\n        self.set_state({\n            'step_number': step,\n            'x_is_next': (step % 2) == 0\n        })\n\n    def render(self):\n        history = self.state['history']\n        current = history[self.state['step_number']]\n        winner = calculate_winner(current['squares'])\n\n        def get_button(move):\n            desc = 'Go to ' + ('move #' + move if move else 'game start')\n            return e('li', {'key': move},\n                e('button', {'onClick': lambda: self.jump_to(move)}, desc)\n            )\n        moves = [get_button(move) for move in range(len(history))]\n\n        if winner:\n            status = 'Winner: ' + winner\n        else:\n            status = 'Next player: ' + ('X' if self.state['x_is_next'] else 'O')\n\n        return e('div', {'class': 'game'},\n            e('div', {'class': 'game-board'},\n                e(self.use('board', Board), {'squares': current['squares'], 'onClick': self.handle_click})\n            ),\n            e('div', {'class': 'game-info'},\n                e('div', None, status),\n                e('ol', None, moves)\n            )\n        )\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAEA;AAKA;AAAA;AAIA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}